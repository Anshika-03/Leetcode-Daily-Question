class Solution {
    private int binarySearch(int[][] arr,int end,int l,int r) {
        int res=-1; 
        while(l<=r){
            int mid=l+(r-l)/2;
            if (arr[mid][1]<=end) {
                res=mid;
                l=mid+1;
            }else{
                r=mid-1;
            }
        }
        return res;
    }

    public int jobScheduling(int[] startTime,int[] endTime,int[] profit) {
        int n=startTime.length;
        int[][] arr=new int[n][3];
        for(int i=0;i<n;i++){ 
            arr[i][0]=startTime[i]; 
            arr[i][1]=endTime[i]; 
            arr[i][2]=profit[i]; 
        }
        Arrays.sort(arr,Comparator.comparingInt(m -> m[1]));
        int[] dp=new int[n];
        dp[0]=arr[0][2];

        for(int i=1;i<n;i++){
            int prev=0;
            int lastJobIndex=binarySearch(arr,arr[i][0],0,i-1);
            if(lastJobIndex!=-1){
                prev=dp[lastJobIndex];
            }
            dp[i]=Math.max(prev+arr[i][2],dp[i-1]);
        }
        return dp[n - 1];
        
    }
}
